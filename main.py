import os
import datetime
import telebot
from telebot import types
from dotenv import load_dotenv
from knowledge_base import find_relevant_chunks, load_documents, knowledge_base
import openai

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
openai.api_key = OPENAI_API_KEY

user_states = {}
user_results = {}

THEMES = {
    "–†–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ": {
        "presentation": "presentations/—Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ(1).pptx",
        "quiz": [
            {
                "q": "1. ‚Äú–ú–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —Ç–µ—Ö–ø–æ–º–æ—â—å, —è —Å–∞–º —Å–ø—Ä–∞–≤–ª—é—Å—å‚Äù",
                "options": [
                    "A) –•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ, —Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω—É–∂–Ω–∞ –Ω–∞—à–∞ —É—Å–ª—É–≥–∞",
                    "B) –ü–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É, —Ç–µ—Ö–ø–æ–º–æ—â—å –º–æ–∂–µ—Ç –∏ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è. –ù–æ –Ω–∞ –¥–æ—Ä–æ–≥–µ —Å–ª—É—á–∞—é—Ç—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–µ—â–∏: —Å–ø—É—Å—Ç–∏–ª–æ –∫–æ–ª–µ—Å–æ, —Å–µ–ª–∞ –±–∞—Ç–∞—Ä–µ—è, –∑–∞–≥–ª–æ—Ö –¥–≤–∏–≥–∞—Ç–µ–ª—å, –∫–æ–Ω—á–∏–ª—Å—è –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ. –õ–ò–¢–†–û ‚Äî —ç—Ç–æ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—è –≤–∞—à–∏—Ö –Ω–µ—Ä–≤–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏",
                    "C) –ö–∞–∂–¥—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –¥—É–º–∞–µ—Ç, —á—Ç–æ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å–∞–º, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ",
                    "D) –¢–µ—Ö–ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞ –≤—Å–µ–º –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –¥–∞–∂–µ —Å–∞–º—ã–º –æ–ø—ã—Ç–Ω—ã–º –≤–æ–¥–∏—Ç–µ–ª—è–º",
                    "E) –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∞–º–∏, –Ω–æ –ø–æ—Ç–æ–º –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º"
                ],
                "answer": 1
            },
            {
                "q": "2. ‚Äú–≠–≤–∞–∫—É–∞—Ç–æ—Ä? –£ –º–µ–Ω—è –∂–µ –Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞‚Äù",
                "options": [
                    "A) –ù–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –ª–æ–º–∞—é—Ç—Å—è —á–∞—â–µ —Å—Ç–∞—Ä—ã—Ö –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
                    "B) –î–∞, –Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –Ω–∞–¥—ë–∂–Ω–æ, –Ω–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –∏ –¥–∞–∂–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å. –î–∞–∂–µ –Ω–æ–≤—ã–µ –∞–≤—Ç–æ –º–æ–≥—É—Ç –∑–∞–≥–ª–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Å—Ç–∏—Å—å. –° –õ–ò–¢–†–û –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–º–æ—â—å –ø—Ä–∏–µ–¥–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                    "C) –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª–æ–º–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ",
                    "D) –ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –∞–≤–∞—Ä–∏–∏ —Å–ª—É—á–∞—é—Ç—Å—è —Å –ª—é–±—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏",
                    "E) –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –∏–º–µ—Ç—å —Ç–µ—Ö–ø–æ–º–æ—â—å –¥–∞–∂–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ"
                ],
                "answer": 1
            },
            {
                "q": "3. ‚Äú–Ø —Ä–µ–¥–∫–æ –µ–∑–∂—É, –º–Ω–µ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ‚Äù",
                "options": [
                    "A) –¢–µ–º, –∫—Ç–æ –µ–∑–¥–∏—Ç —Ä–µ–¥–∫–æ, —Ç–µ—Ö–ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞ –µ—â—ë –±–æ–ª—å—à–µ, —á–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º",
                    "B) –ö–∞–∫ —Ä–∞–∑ —Ç–µ–º, –∫—Ç–æ –µ–∑–¥–∏—Ç —Ä–µ–¥–∫–æ, —Ç–∞–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–ª–∞ –±–∞—Ç–∞—Ä–µ—è –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π —Å—Ç–æ—è–Ω–∫–∏ ‚Äî –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–µ—Ö–∞—Ç—å. –ò–ª–∏ –∑–∞–±—ã–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç, –∏ –º–∞—à–∏–Ω–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è. –õ–ò–¢–†–û ‚Äî —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–∏—Ö —Ä–µ–¥–∫–∏—Ö, –Ω–æ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö",
                    "C) –ï—Å–ª–∏ –≤—ã —Ä–µ–¥–∫–æ –µ–∑–¥–∏—Ç–µ, —Ç–æ –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç–≤–∞–∫—É–∞—Ç–æ—Ä",
                    "D) –†–µ–¥–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º",
                    "E) –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–∞–ª–∞, —á—Ç–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–æ–µ–∑–¥–æ–∫"
                ],
                "answer": 1
            },
            {
                "q": "4. ‚Äú–Ø –ª—É—á—à–µ –≤—ã–∑–æ–≤—É —Ç–∞–∫—Å–∏ –∏–ª–∏ –Ω–∞–π–¥—É –ø–æ–º–æ—â—å —Å–∞–º‚Äù",
                "options": [
                    "A) –¢–∞–∫—Å–∏ –¥–æ—Ä–æ–∂–µ, —á–µ–º –Ω–∞—à–∞ —É—Å–ª—É–≥–∞ —Ç–µ—Ö–ø–æ–º–æ—â–∏ –Ω–∞ –≤–µ—Å—å –≥–æ–¥",
                    "B) –¢–∞–∫—Å–∏ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ–º, –Ω–æ –Ω–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –ê –Ω–∞–π—Ç–∏ —ç–≤–∞–∫—É–∞—Ç–æ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–æ—á—å—é –∏–ª–∏ –∑–∞ –≥–æ—Ä–æ–¥–æ–º, –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –∏ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –¥–æ—Ä–æ–∂–µ. –° –õ–ò–¢–†–û –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äî –∏ –≤—Å—è –ø–æ–º–æ—â—å —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞",
                    "C) –ù–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
                    "D) –¢–∞–∫—Å–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º",
                    "E) –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–º–æ—â–∏ –æ—Ç–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤"
                ],
                "answer": 1
            }
        ]
    }
}

# == –ö–æ–º–∞–Ω–¥—ã ==
@bot.message_handler(commands=['start'])
def handle_start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìå –†–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ")
    keyboard.add("üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    keyboard.add("üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

@bot.message_handler(commands=["–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"])
def reload_knowledge(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É.")
        return
    try:
        knowledge_base.clear()
        knowledge_base.extend(load_documents())
        bot.send_message(message.chat.id, "üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

# == –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ==
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "üìå –†–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ":
        user_states[user_id] = {
            "mode": "theme",
            "theme": "–†–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ",
            "current": 0,
            "score": 0
        }
        bot.send_message(message.chat.id, "üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: –†–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –õ–∏—Ç—Ä–æ")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="start_quiz"))
        bot.send_message(message.chat.id, "üß™ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞.", reply_markup=markup)

    elif text == "üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        results = user_results.get(user_id, [])
        if not results:
            bot.send_message(message.chat.id, "üì≠ –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã.")
        else:
            result_text = "üóÇ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
                [f"‚Ä¢ {r['theme']} ‚Äî {r['score']}/{r['total']} ({r['date']})" for r in results]
            )
            bot.send_message(message.chat.id, result_text)

    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = {"mode": "chat"}
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")

    elif text == "üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        user_states[user_id] = {"mode": "select_role"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç", "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=markup)

    elif text == "üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç":
        user_states[user_id] = {"mode": "train", "role": "client"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=markup)

    elif text == "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä":
        user_states[user_id] = {"mode": "train", "role": "manager"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=markup)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        handle_start(message)

    else:
        mode = user_states.get(user_id, {}).get("mode", "")
        if mode in ["chat", "train"]:
            role = user_states[user_id].get("role", "client")
            context_chunks = find_relevant_chunks(text, role) if mode == "train" else []
            system_prompt = {
                "chat": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
                "client": "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç AsterAuto. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
                "manager": "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ AsterAuto. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã."
            }[role if mode == "train" else "chat"]
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt + ("\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n---\n".join(context_chunks) if context_chunks else "")},
                        {"role": "user", "content": text}
                    ]
                )
                bot.send_message(message.chat.id, response['choices'][0]['message']['content'].strip())
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")

# == –ö–≤–∏–∑—ã ==
@bot.callback_query_handler(func=lambda call: call.data == "start_quiz" or ":" in call.data)
def handle_callback(call):
    user_id = call.from_user.id
    data = call.data
    chat_id = call.message.chat.id

    if data == "start_quiz":
        user_states[user_id]["mode"] = "quiz"
        user_states[user_id]["current"] = 0
        user_states[user_id]["score"] = 0
        send_question(chat_id, user_id)
    else:
        q_index, selected = map(int, data.split(":"))
        theme = user_states[user_id]["theme"]
        correct = THEMES[theme]["quiz"][q_index]["answer"]
        if selected == correct:
            user_states[user_id]["score"] += 1
        user_states[user_id]["current"] += 1
        send_question(chat_id, user_id)

def send_question(chat_id, user_id):
    state = user_states[user_id]
    theme = state["theme"]
    quiz = THEMES[theme]["quiz"]
    index = state["current"]

    if index >= len(quiz):
        score = state["score"]
        total = len(quiz)
        user_results.setdefault(user_id, []).append({
            "theme": theme,
            "score": score,
            "total": total,
            "date": datetime.datetime.now().strftime("%Y-%m-%d")
        })
        user_states[user_id]["mode"] = "theme"
        bot.send_message(chat_id, f"‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total}.")
        return

    q = quiz[index]
    markup = types.InlineKeyboardMarkup()
    for i, option in enumerate(q["options"]):
        markup.add(types.InlineKeyboardButton(option, callback_data=f"{index}:{i}"))
    bot.send_message(chat_id, f"üß™ {q['q']}", reply_markup=markup)

# == –ó–∞–ø—É—Å–∫ ==
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ pyTelegramBotAPI!")
    bot.infinity_polling()