import os
import datetime
import openai
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils import markdown
from aiogram import Router
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID
from knowledge_base import find_relevant_chunks, load_documents, knowledge_base

openai.api_key = OPENAI_API_KEY

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_states = {}
user_results = {}

THEMES = {
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 365": {
        "presentation": "presentations/presentation.pdf",
        "video_url": "https://youtu.be/fdVDF42lehU",
        "quiz": [
            {
                "q": "1. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ \"–ì–∞—Ä–∞–Ω—Ç–∏—è 365\"?",
                "options": ["A) –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞", "B) –¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏", "C) –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "D) –†–∞–±–æ—Ç–∞, –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                "answer": 3
            },
            {
                "q": "2. –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π?",
                "options": ["A) –î–∞, –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö", "B) –î–∞, –Ω–µ –±–æ–ª–µ–µ –ø—è—Ç–∏", "C) –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π", "D) –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ"],
                "answer": 2
            }
        ]
    }
}

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365")],
        [KeyboardButton(text="üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"), KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=main_menu)

@router.message(F.text == "üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365")
async def handle_theme(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = {"mode": "theme", "theme": "–ì–∞—Ä–∞–Ω—Ç–∏—è 365", "current": 0, "score": 0}

    pres_path = THEMES["–ì–∞—Ä–∞–Ω—Ç–∏—è 365"]["presentation"]
    if os.path.exists(pres_path):
        doc = FSInputFile(pres_path)
        await message.answer_document(document=doc, caption="üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:")
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await message.answer(f"üé¨ –í–∏–¥–µ–æ: {THEMES['–ì–∞—Ä–∞–Ω—Ç–∏—è 365']['video_url']}")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üß™ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="start_quiz")]]
    )
    await message.answer("üß™ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞:", reply_markup=kb)
    @router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id]["mode"] = "quiz"
    user_states[user_id]["current"] = 0
    user_states[user_id]["score"] = 0
    await callback.answer()
    await send_question(callback.message.chat.id, user_id)

@router.callback_query(F.data.regexp(r"^\d+:\d$"))
async def handle_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    q_index, selected = map(int, data.split(":"))
    theme = user_states[user_id]["theme"]
    quiz = THEMES[theme]["quiz"]
    correct = quiz[q_index]["answer"]
    if selected == correct:
        user_states[user_id]["score"] += 1
    user_states[user_id]["current"] += 1
    await callback.answer()
    await send_question(callback.message.chat.id, user_id)

async def send_question(chat_id: int, user_id: int):
    state = user_states[user_id]
    theme = state["theme"]
    quiz = THEMES[theme]["quiz"]
    index = state["current"]

    if index >= len(quiz):
        score = state["score"]
        total = len(quiz)
        user_results.setdefault(user_id, []).append({
            "theme": theme,
            "score": score,
            "total": total,
            "date": datetime.datetime.now().strftime("%Y-%m-%d")
        })
        user_states[user_id]["mode"] = "theme"
        await bot.send_message(chat_id, f"‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total}.")
        return

    q = quiz[index]
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=f"{index}:{i}")]
        for i, opt in enumerate(q["options"])
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id, f"üß™ {q['q']}", reply_markup=kb)
    @router.message(F.text == "üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
async def show_results(message: Message):
    user_id = message.from_user.id
    results = user_results.get(user_id, [])
    if not results:
        await message.answer("üì≠ –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã.")
    else:
        result_text = "üóÇ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
            [f"‚Ä¢ {r['theme']} ‚Äî {r['score']}/{r['total']} ({r['date']})" for r in results]
        )
        await message.answer(result_text)

@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def enter_chat_mode(message: Message):
    user_states[message.from_user.id] = {"mode": "chat"}
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")

@router.message(F.text == "üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def enter_train_mode(message: Message):
    user_states[message.from_user.id] = {"mode": "select_role"}
    role_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç"), KeyboardButton("üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_keyboard)

@router.message(F.text.in_(["üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç", "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä"]))
async def select_role(message: Message):
    role = "client" if "–∫–ª–∏–µ–Ω—Ç" in message.text else "manager"
    user_states[message.from_user.id] = {"mode": "train", "role": role}
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã." if role == "client"
        else "–•–æ—Ä–æ—à–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await start_cmd(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞)
@router.message(F.text)
async def handle_general_text(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.get(user_id, {})
    mode = state.get("mode", "")

    if mode not in ["chat", "train"]:
        return

    role = state.get("role", "client")
    system_prompt = {
        "chat": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
        "client": "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç AsterAuto. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
        "manager": "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ AsterAuto. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã."
    }[role if mode == "train" else "chat"]

    context_chunks = []
    if mode == "train":
        context_chunks = find_relevant_chunks(text, role)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt + ("\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n---\n".join(context_chunks) if context_chunks else "")},
                {"role": "user", "content": text}
            ]
        )
        await message.answer(response["choices"][0]["message"]["content"].strip())
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
        @router.message(F.document)
async def handle_document(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return

    doc = message.document
    if not doc:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    os.makedirs("presentations", exist_ok=True)
    file_path = f"presentations/{doc.file_name}"
    await bot.download(doc, destination=file_path)
    await message.answer(f"‚úÖ –§–∞–π–ª ¬´{doc.file_name}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ /presentations.")

@router.message(Command("–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"))
async def reload_knowledge(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É.")
        return

    try:
        knowledge_base.clear()
        knowledge_base.extend(load_documents())
        await message.answer("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
import asyncio

if __name__ == "__main__":
    async def main():
        print("üöÄ –ë–æ—Ç AsterAuto –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram!")
        await dp.start_polling(bot)

    asyncio.run(main())
     