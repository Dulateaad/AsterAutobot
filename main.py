import os
import datetime
import openai
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
)
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID
from knowledge_base import find_relevant_chunks, load_documents, knowledge_base

openai.api_key = OPENAI_API_KEY

user_states = {}
user_results = {}

THEMES = {
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 365": {
        "presentation": "files/presentation.pdf",
        "video_url": "https://youtu.be/fdVDF42lehU",
        "quiz": [
            {
                "q": "1. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ \"–ì–∞—Ä–∞–Ω—Ç–∏—è 365\"?",
                "options": ["A) –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞", "B) –¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏", "C) –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "D) –†–∞–±–æ—Ç–∞, –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                "answer": 3
            },
            {
                "q": "2. –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π?",
                "options": ["A) –î–∞, –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö", "B) –î–∞, –Ω–µ –±–æ–ª–µ–µ –ø—è—Ç–∏", "C) –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π", "D) –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ"],
                "answer": 2
            }
        ]
    }
}

def start(update: Update, context: CallbackContext):
    keyboard = [
        ["üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365"],
        ["üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"]  # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=markup)

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365":
        user_states[user_id] = {"mode": "theme", "theme": "–ì–∞—Ä–∞–Ω—Ç–∏—è 365", "current": 0, "score": 0}
        update.message.reply_text("üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:")
        update.message.reply_document(open(THEMES["–ì–∞—Ä–∞–Ω—Ç–∏—è 365"]["presentation"], "rb"))
        update.message.reply_text(f"üé¨ –í–∏–¥–µ–æ: {THEMES['–ì–∞—Ä–∞–Ω—Ç–∏—è 365']['video_url']}")
        update.message.reply_text("üß™ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="start_quiz")]]))
        return

    if text == "üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        results = user_results.get(user_id, [])
        if not results:
            update.message.reply_text("üì≠ –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã.")
        else:
            result_text = "üóÇ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
                [f"‚Ä¢ {r['theme']} ‚Äî {r['score']}/{r['total']} ({r['date']})" for r in results]
            )
            update.message.reply_text(result_text)
        return

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = {"mode": "chat"}
        update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        return

    if text == "üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        user_states[user_id] = {"mode": "select_role"}
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardMarkup([["üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç", "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä"]], resize_keyboard=True))
        return

    if text == "üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç":
        user_states[user_id] = {"mode": "train", "role": "client"}
        update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]], resize_keyboard=True))
        return

    if text == "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä":
        user_states[user_id] = {"mode": "train", "role": "manager"}
        update.message.reply_text("–•–æ—Ä–æ—à–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]], resize_keyboard=True))
        return

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        start(update, context)
        return

    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é":
        if user_id != ADMIN_ID:
            update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.")
            return
        user_states[user_id] = {"mode": "upload"}
        update.message.reply_text("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π.")
        return

    mode = user_states.get(user_id, {}).get("mode", "")
    if mode in ["chat", "train"]:
        role = user_states[user_id].get("role", "client")
        context_chunks = find_relevant_chunks(text, role) if mode == "train" else []

        system_prompt = {
            "chat": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
            "client": "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç AsterAuto. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
            "manager": "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ AsterAuto. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã."
        }[role if mode == "train" else "chat"]

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt + ("\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n---\n".join(context_chunks) if context_chunks else "")},
                    {"role": "user", "content": text}
                ]
            )
            update.message.reply_text(response["choices"][0]["message"]["content"].strip())
        except Exception as e:
            update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
        return

def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    query.answer()

    if data == "start_quiz":
        user_states[user_id]["mode"] = "quiz"
        user_states[user_id]["current"] = 0
        user_states[user_id]["score"] = 0
        send_question(query.message.chat_id, context.bot, user_id)
        return

    if ":" in data:
        q_index, selected = map(int, data.split(":"))
        theme = user_states[user_id]["theme"]
        quiz = THEMES[theme]["quiz"]
        correct = quiz[q_index]["answer"]
        if selected == correct:
            user_states[user_id]["score"] += 1
        user_states[user_id]["current"] += 1
        send_question(query.message.chat_id, context.bot, user_id)

def send_question(chat_id, bot, user_id):
    state = user_states[user_id]
    theme = state["theme"]
    quiz = THEMES[theme]["quiz"]
    index = state["current"]

    if index >= len(quiz):
        score = state["score"]
        total = len(quiz)
        user_results.setdefault(user_id, []).append({
            "theme": theme,
            "score": score,
            "total": total,
            "date": datetime.datetime.now().strftime("%Y-%m-%d")
        })
        user_states[user_id]["mode"] = "theme"
        bot.send_message(chat_id=chat_id, text=f"‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total}.")
        return

    q = quiz[index]
    buttons = [[InlineKeyboardButton(opt, callback_data=f"{index}:{i}")] for i, opt in enumerate(q["options"])]
    bot.send_message(chat_id=chat_id, text=f"üß™ {q['q']}", reply_markup=InlineKeyboardMarkup(buttons))

def handle_document(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return

    state = user_states.get(user_id, {})
    if state.get("mode") != "upload":
        update.message.reply_text("‚ö†Ô∏è –°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
        return

    doc = update.message.document
    if not doc:
        update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    if not doc.file_name.endswith(".pdf"):
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
        return

    os.makedirs("presentations", exist_ok=True)
    file_path = f"presentations/{doc.file_name}"
    doc.get_file().download(custom_path=file_path)

    update.message.reply_text(f"‚úÖ –§–∞–π–ª ¬´{doc.file_name}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É /presentations.")
    user_states[user_id] = {}  # —Å–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞

def reload_knowledge(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É.")
        return

    try:
        knowledge_base.clear()
        knowledge_base.extend(load_documents())
        update.message.reply_text("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

def main():
    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É", reload_knowledge))
    dp.add_handler(CallbackQueryHandler(handle_callback))
    dp.add_handler(MessageHandler(Filters.document, handle_document))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    print("üöÄ –ë–æ—Ç AsterAuto –∑–∞–ø—É—â–µ–Ω (v13 style)")
    updater.idle()

if __name__ == "__main__":
    main()