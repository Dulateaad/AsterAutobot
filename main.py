import os
import datetime
import telebot
from telebot import types
from dotenv import load_dotenv
from knowledge_base import find_relevant_chunks, load_documents, knowledge_base
import openai

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
openai.api_key = OPENAI_API_KEY

user_states = {}
user_results = {}

THEMES = {
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 365": {
        "presentation": "files/presentation.pdf",
        "video_url": "https://youtu.be/fdVDF42lehU",
        "quiz": [
            {
                "q": "1. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ \"–ì–∞—Ä–∞–Ω—Ç–∏—è 365\"?",
                "options": ["A) –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞", "B) –¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏", "C) –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "D) –†–∞–±–æ—Ç–∞, –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                "answer": 3
            },
            {
                "q": "2. –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π?",
                "options": ["A) –î–∞, –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö", "B) –î–∞, –Ω–µ –±–æ–ª–µ–µ –ø—è—Ç–∏", "C) –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π", "D) –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ"],
                "answer": 2
            }
        ]
    }
}

# == –ö–æ–º–∞–Ω–¥—ã ==

@bot.message_handler(commands=['start'])
def handle_start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365")
    keyboard.add("üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    keyboard.add("üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

@bot.message_handler(commands=["–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"])
def reload_knowledge(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É.")
        return
    try:
        knowledge_base.clear()
        knowledge_base.extend(load_documents())
        bot.send_message(message.chat.id, "üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

# == –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ==

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365":
        user_states[user_id] = {"mode": "theme", "theme": "–ì–∞—Ä–∞–Ω—Ç–∏—è 365", "current": 0, "score": 0}
        with open(THEMES["–ì–∞—Ä–∞–Ω—Ç–∏—è 365"]["presentation"], "rb") as doc:
            bot.send_document(message.chat.id, doc)
        bot.send_message(message.chat.id, f"üé¨ –í–∏–¥–µ–æ: {THEMES['–ì–∞—Ä–∞–Ω—Ç–∏—è 365']['video_url']}")
        btn = types.InlineKeyboardMarkup()
        btn.add(types.InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="start_quiz"))
        bot.send_message(message.chat.id, "üß™ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞.", reply_markup=btn)

    elif text == "üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        results = user_results.get(user_id, [])
        if not results:
            bot.send_message(message.chat.id, "üì≠ –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã.")
        else:
            result_text = "üóÇ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
                [f"‚Ä¢ {r['theme']} ‚Äî {r['score']}/{r['total']} ({r['date']})" for r in results]
            )
            bot.send_message(message.chat.id, result_text)

    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = {"mode": "chat"}
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")

    elif text == "üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        user_states[user_id] = {"mode": "select_role"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç", "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=markup)

    elif text == "üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç":
        user_states[user_id] = {"mode": "train", "role": "client"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=markup)

    elif text == "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä":
        user_states[user_id] = {"mode": "train", "role": "manager"}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=markup)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        handle_start(message)

    else:
        mode = user_states.get(user_id, {}).get("mode", "")
        if mode in ["chat", "train"]:
            role = user_states[user_id].get("role", "client")
            context_chunks = find_relevant_chunks(text, role) if mode == "train" else []

            system_prompt = {
                "chat": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
                "client": "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç AsterAuto. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
                "manager": "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ AsterAuto. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã."
            }[role if mode == "train" else "chat"]

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt + ("\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n---\n".join(context_chunks) if context_chunks else "")},
                        {"role": "user", "content": text}
                    ]
                )
                bot.send_message(message.chat.id, response['choices'][0]['message']['content'].strip())
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")

# == –ö–≤–∏–∑—ã ==

@bot.callback_query_handler(func=lambda call: call.data == "start_quiz" or ":" in call.data)
def handle_callback(call):
    user_id = call.from_user.id
    data = call.data
    chat_id = call.message.chat.id

    if data == "start_quiz":
        user_states[user_id]["mode"] = "quiz"
        user_states[user_id]["current"] = 0
        user_states[user_id]["score"] = 0
        send_question(chat_id, user_id)
    else:
        q_index, selected = map(int, data.split(":"))
        theme = user_states[user_id]["theme"]
        correct = THEMES[theme]["quiz"][q_index]["answer"]
        if selected == correct:
            user_states[user_id]["score"] += 1
        user_states[user_id]["current"] += 1
        send_question(chat_id, user_id)

def send_question(chat_id, user_id):
    state = user_states[user_id]
    theme = state["theme"]
    quiz = THEMES[theme]["quiz"]
    index = state["current"]

    if index >= len(quiz):
        score = state["score"]
        total = len(quiz)
        user_results.setdefault(user_id, []).append({
            "theme": theme,
            "score": score,
            "total": total,
            "date": datetime.datetime.now().strftime("%Y-%m-%d")
        })
        user_states[user_id]["mode"] = "theme"
        bot.send_message(chat_id, f"‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total}.")
        return

    q = quiz[index]
    markup = types.InlineKeyboardMarkup()
    for i, option in enumerate(q["options"]):
        markup.add(types.InlineKeyboardButton(option, callback_data=f"{index}:{i}"))
    bot.send_message(chat_id, f"üß™ {q['q']}", reply_markup=markup)

# == –ó–∞–ø—É—Å–∫ ==

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ pyTelegramBotAPI!")
    bot.infinity_polling()