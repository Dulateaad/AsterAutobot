import os
import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from dotenv import load_dotenv
from knowledge_base import find_relevant_chunks, load_documents, knowledge_base
import openai

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

openai.api_key = OPENAI_API_KEY

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_states = {}
user_results = {}

THEMES = {
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 365": {
        "presentation": "files/presentation.pdf",
        "video_url": "https://youtu.be/fdVDF42lehU",
        "quiz": [
            {
                "q": "1. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ \"–ì–∞—Ä–∞–Ω—Ç–∏—è 365\"?",
                "options": ["A) –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞", "B) –¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏", "C) –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "D) –†–∞–±–æ—Ç–∞, –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                "answer": 3
            },
            {
                "q": "2. –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π?",
                "options": ["A) –î–∞, –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö", "B) –î–∞, –Ω–µ –±–æ–ª–µ–µ –ø—è—Ç–∏", "C) –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π", "D) –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ"],
                "answer": 2
            }
        ]
    }
}

@router.message(Command("start"))
async def start(message: Message):
    keyboard = [["üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365"], ["üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"], ["üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=markup)

@router.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "üìå –ì–∞—Ä–∞–Ω—Ç–∏—è 365":
        user_states[user_id] = {"mode": "theme", "theme": "–ì–∞—Ä–∞–Ω—Ç–∏—è 365", "current": 0, "score": 0}
        await message.answer_document(open(THEMES["–ì–∞—Ä–∞–Ω—Ç–∏—è 365"]["presentation"], "rb"))
        await message.answer(f"üé¨ –í–∏–¥–µ–æ: {THEMES['–ì–∞—Ä–∞–Ω—Ç–∏—è 365']['video_url']}")
        await message.answer("üß™ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üß™ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="start_quiz")]]))
        return

    if text == "üìÇ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        results = user_results.get(user_id, [])
        if not results:
            await message.answer("üì≠ –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã.")
        else:
            result_text = "üóÇ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
                [f"‚Ä¢ {r['theme']} ‚Äî {r['score']}/{r['total']} ({r['date']})" for r in results]
            )
            await message.answer(result_text)
        return

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = {"mode": "chat"}
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        return

    if text == "üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        user_states[user_id] = {"mode": "select_role"}
        markup = ReplyKeyboardMarkup(keyboard=[["üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç", "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä"]], resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=markup)
        return

    if text == "üôã‚Äç‚ôÇÔ∏è –Ø –∫–ª–∏–µ–Ω—Ç":
        user_states[user_id] = {"mode": "train", "role": "client"}
        markup = ReplyKeyboardMarkup(keyboard=[["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=markup)
        return

    if text == "üíº –Ø –º–µ–Ω–µ–¥–∂–µ—Ä":
        user_states[user_id] = {"mode": "train", "role": "manager"}
        markup = ReplyKeyboardMarkup(keyboard=[["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        await message.answer("–•–æ—Ä–æ—à–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=markup)
        return

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await start(message)
        return

    mode = user_states.get(user_id, {}).get("mode", "")
    if mode in ["chat", "train"]:
        role = user_states[user_id].get("role", "client")
        context_chunks = find_relevant_chunks(text, role) if mode == "train" else []

        system_prompt = {
            "chat": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
            "client": "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç AsterAuto. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.",
            "manager": "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ AsterAuto. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã."
        }[role if mode == "train" else "chat"]

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt + ("\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n---\n".join(context_chunks) if context_chunks else "")},
                    {"role": "user", "content": text}
                ]
            )
            await message.answer(response["choices"][0]["message"]["content"].strip())
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {str(e)}")

@router.callback_query()
async def handle_callback(callback):
    user_id = callback.from_user.id
    data = callback.data
    await callback.answer()

    if data == "start_quiz":
        user_states[user_id]["mode"] = "quiz"
        user_states[user_id]["current"] = 0
        user_states[user_id]["score"] = 0
        await send_question(callback.message.chat.id, user_id)
        return

    if ":" in data:
        q_index, selected = map(int, data.split(":"))
        theme = user_states[user_id]["theme"]
        quiz = THEMES[theme]["quiz"]
        correct = quiz[q_index]["answer"]
        if selected == correct:
            user_states[user_id]["score"] += 1
        user_states[user_id]["current"] += 1
        await send_question(callback.message.chat.id, user_id)

async def send_question(chat_id, user_id):
    state = user_states[user_id]
    theme = state["theme"]
    quiz = THEMES[theme]["quiz"]
    index = state["current"]

    if index >= len(quiz):
        score = state["score"]
        total = len(quiz)
        user_results.setdefault(user_id, []).append({
            "theme": theme,
            "score": score,
            "total": total,
            "date": datetime.datetime.now().strftime("%Y-%m-%d")
        })
        user_states[user_id]["mode"] = "theme"
        await bot.send_message(chat_id, f"‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total}.")
        return

    q = quiz[index]
    buttons = [[InlineKeyboardButton(text=opt, callback_data=f"{index}:{i}")] for i, opt in enumerate(q["options"])]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id, f"üß™ {q['q']}", reply_markup=markup)

@router.message(Command("–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"))
async def reload_knowledge(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É.")
        return

    try:
        knowledge_base.clear()
        knowledge_base.extend(load_documents())
        await message.answer("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

# üîÅ –ó–∞–ø—É—Å–∫
import asyncio

if __name__ == "__main__":
    async def main():
        print("üöÄ –ë–æ—Ç AsterAuto –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram!")
        await dp.start_polling(bot)

    asyncio.run(main())